plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.3'
}

group 'org.example'
version '1.0-SNAPSHOT'

/*
Изменить структуру каталогов проекта
sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
    }
}
*/

// Версия java
java.toolchain.languageVersion = JavaLanguageVersion.of(8);
//java.sourceCompatibility = JavaVersion.VERSION_1_8;

// Сборка исполняемого jar файла
bootJar {
    archiveVersion = ''
    mainClass = 'com.panyukovnn.gradlebasics.GradlebasicsApplication'
}

// Конфигурация
configurations {
    compileOnly.extendsFrom annotationProcessor
    testCompileOnly.extendsFrom annotaionProcessor
    testAnnotationProcessor.extendsFrom annotaionProcessor
}

// Объявление переменной
def springBootVersion = '2.4.3'
/*
ext {
    commonsVersion = 3.11
}
*/

// Репозитории
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    /*
    flatDir {
        dirs 'lib'
    }
    */
}

dependencies {
    /*
    compileOnly - только на этапе компиляции (ломбок, логгер)
    runtimeOnly - только в рантайме (hibernate, postgres) (эквивалент скоуп 'runtime' в maven)
    implementation - и в рантайме и на этапе компиляции (эквивалент не заданного скоупа или 'compile' в мавен)

    Устаревшие:
    compile
    runtime

    testCompileOnly - на этапе компиляции для тестов (не будет при компиляции проекта)
    testRuntimeOnly - в рантайме для тестов (не будет в рантайме проекта)
    testImplementation - в рантайме и на этапе компиляции для тестов (эквивалент 'test' в maven)

    Устаревшие:
    testCompile
    testRuntime

    annotaionProcessor - запуск процессоров аннотаций для проекта (кроме тестов)
    testAnnotaionProcessor - запуск процессора аннотаций для тестов

    api - использовать для создания библиотеки
    compileOnlyApi - работает не так как зявлено, не использовать
    */

    implementation "org.springframework.boot:spring-boot-starter-tomcat:$springBootVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springBootVersion"

    annotationProcessor "org.projectlombok:lombok:1.18.16"
//    compileOnly 'org.projectlombok:lombok:1.18.16'
//    testCompileOnly 'org.projectlombok:lombok:1.18.16'
//    testAnnotationProcessor 'org.projectlombok:lombok:1.18.16'

    implementation gradleApi()
}

// Кодировка
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

/*
Таска - единица работы

Каждый таск является объектом, его можно сконфигурировать, настроить,
можно от него наследоваться и что-то добавить.

В таску можно положить любой java/groovy код - это и сила и слабость, потому что можно сделать что угодно.

: gradle tasks - посмотреть какие таски сейчас доступны
: gradle clean - очистить проект
: gradle build - собрать исполняемый jar файл (аналог 'package' в maven)
: gradle build -x test - собрать проект и пропустить таску 'test'
: gradle build --dry-run - запустить таску и показать порядок выполненных тасок
*/

// Собственные таски
task helloWorld {
    doFirst {
        println 'Hello, ' + nameProperty + '!'
    }
}

/*
dependOn check
build.dependsOn helloWorld
*/

/*
task greetingTask(type: GreetingTask) {
    greetingName "ESA SPB"
}
*/
